// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  name      String
  role      UserRole
  locationId String?  @map("location_id") @db.Uuid // Primary location for host
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Referral tracking for hosts
  referralCount    Int       @default(0) @map("referral_count") // Total successful referrals
  conversionCount  Int       @default(0) @map("conversion_count") // Guests converted to hosts
  rewardBalance    Float     @default(0) @map("reward_balance") // Earned referral rewards
  hostTier         HostTier  @default(BRONZE) @map("host_tier") // Bronze/Silver/Gold status

  // Relations
  location        Location? @relation(fields: [locationId], references: [id])
  hostedVisits    Visit[] @relation("HostVisits")
  overrideVisits  Visit[] @relation("OverrideVisits")
  hostedInvitations Invitation[] @relation("HostInvitations")
  convertedGuests Guest[] @relation("ConvertedGuests") // Guests who became hosts
  referralEvents  ReferralEvent[] // Track referral activities

  @@map("users")
}

model Guest {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String    @unique
  name             String?   // Now nullable - guest fills this in
  phone            String?
  country          String?   // Now nullable - guest fills this in
  contactMethod    ContactMethod?  @map("contact_method")
  contactValue     String?         @map("contact_value")
  profileCompleted Boolean   @default(false) @map("profile_completed") // Track if guest completed profile
  termsAcceptedAt  DateTime? @map("terms_accepted_at") @db.Timestamptz
  blacklistedAt    DateTime? @map("blacklisted_at") @db.Timestamptz
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Business context fields for conversion tracking
  company          String?   // Company name
  jobTitle         String?   @map("job_title") // Role/position
  industry         String?   // Industry sector
  companySize      String?   @map("company_size") // Startup, SME, Enterprise
  interests        String[]  @default([]) // Areas of interest
  
  // Conversion tracking
  conversionInterest  Float?    @default(0) @map("conversion_interest") // 0-10 interest score
  lastOutreachAt      DateTime? @map("last_outreach_at") @db.Timestamptz
  becameHostAt        DateTime? @map("became_host_at") @db.Timestamptz
  hostUserId          String?   @map("host_user_id") @db.Uuid // If converted to host
  
  // Survey responses
  satisfactionScore   Int?      @map("satisfaction_score") // 1-5 rating
  npsScore           Int?       @map("nps_score") // Net Promoter Score 0-10
  feedbackText       String?    @map("feedback_text") // Open-ended feedback

  // Relations
  visits      Visit[]
  invitations Invitation[]
  acceptances Acceptance[]
  discounts   Discount[]
  frequentVisitor FrequentVisitor?
  conversionEvents ConversionEvent[]
  hostUser    User?        @relation("ConvertedGuests", fields: [hostUserId], references: [id])
  surveys     EngagementSurvey[]
  referralEvents ReferralEvent[] @relation("GuestReferrals")

  @@map("guests")
}

model Location {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   // e.g., "Frontier Tower", "Frontier West", "Frontier East"
  address   String
  timezone  String   @default("America/Los_Angeles") // For local time calculations
  isActive  Boolean  @default(true)
  settings  Json?    // Location-specific settings (policies, etc.)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  users       User[]       // Hosts primarily located here
  visits      Visit[]      // Visits occurring at this location
  invitations Invitation[] // Invitations for this location

  @@map("locations")
}

model Visit {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guestId        String    @map("guest_id") @db.Uuid
  hostId         String    @map("host_id") @db.Uuid
  locationId     String    @map("location_id") @db.Uuid // Location where visit occurs
  invitationId   String?   @map("invitation_id") @db.Uuid
  invitedAt      DateTime  @default(now()) @map("invited_at") @db.Timestamptz
  checkedInAt    DateTime? @map("checked_in_at") @db.Timestamptz
  checkedOutAt   DateTime? @map("checked_out_at") @db.Timestamptz
  expiresAt      DateTime? @map("expires_at") @db.Timestamptz
  overrideReason String?   @map("override_reason")
  overrideBy     String?   @map("override_by") @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  guest        Guest       @relation(fields: [guestId], references: [id])
  host         User        @relation("HostVisits", fields: [hostId], references: [id])
  location     Location    @relation(fields: [locationId], references: [id])
  invitation   Invitation? @relation(fields: [invitationId], references: [id])
  overrideUser User?       @relation("OverrideVisits", fields: [overrideBy], references: [id])
  acceptances  Acceptance[] // Visit-scoped acceptances
  surveys      EngagementSurvey[] // Post-visit surveys

  // Indexes
  @@index([guestId, checkedInAt])
  @@index([hostId, checkedInAt])
  @@index([locationId, checkedInAt]) // Location-specific active visits
  @@index([checkedInAt])
  @@index([expiresAt])
  @@map("visits")
}

model Policy {
  id                   Int      @id @default(1)
  guestMonthlyLimit    Int      @default(3) @map("guest_monthly_limit")
  hostConcurrentLimit  Int      @default(3) @map("host_concurrent_limit")
  updatedAt           DateTime @default(now()) @map("updated_at") @db.Timestamptz

  @@map("policies")
}

model Invitation {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guestId      String           @map("guest_id") @db.Uuid
  hostId       String           @map("host_id") @db.Uuid
  locationId   String           @map("location_id") @db.Uuid // Location for invitation
  status       InvitationStatus @default(PENDING)
  inviteDate   DateTime         @map("invite_date") @db.Date
  qrToken      String?          @map("qr_token")
  qrIssuedAt   DateTime?        @map("qr_issued_at") @db.Timestamptz
  qrExpiresAt  DateTime?        @map("qr_expires_at") @db.Timestamptz
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime         @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  guest       Guest        @relation(fields: [guestId], references: [id])
  host        User         @relation("HostInvitations", fields: [hostId], references: [id])
  location    Location     @relation(fields: [locationId], references: [id])
  visits      Visit[]
  acceptances Acceptance[] // Invitation-linked acceptances

  // Indexes
  @@index([hostId, inviteDate])
  @@index([guestId, status])
  @@index([locationId, inviteDate]) // Location-specific invitations
  @@index([qrToken])
  @@map("invitations")
}

model Acceptance {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guestId               String   @map("guest_id") @db.Uuid
  visitId               String?  @map("visit_id") @db.Uuid // Optional for transition period
  invitationId          String?  @map("invitation_id") @db.Uuid // Link to invitation
  termsVersion          String   @map("terms_version")
  visitorAgreementVersion String @map("visitor_agreement_version")
  acceptedAt            DateTime @default(now()) @map("accepted_at") @db.Timestamptz
  expiresAt             DateTime? @map("expires_at") @db.Timestamptz // When acceptance expires

  // Relations
  guest      Guest       @relation(fields: [guestId], references: [id])
  visit      Visit?      @relation(fields: [visitId], references: [id])
  invitation Invitation? @relation(fields: [invitationId], references: [id])

  // Indexes
  @@index([guestId])
  @@index([visitId])
  @@index([invitationId])
  @@index([expiresAt])
  @@index([guestId, visitId, expiresAt]) // Compound index for visit-scoped lookups
  @@map("acceptances")
}

model Discount {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guestId    String    @map("guest_id") @db.Uuid
  triggeredAt DateTime  @default(now()) @map("triggered_at") @db.Timestamptz
  emailSent  Boolean   @default(false) @map("email_sent")
  sentAt     DateTime? @map("sent_at") @db.Timestamptz

  // Relations
  guest Guest @relation(fields: [guestId], references: [id])

  // Indexes
  @@index([guestId])
  @@map("discounts")
}

// New analytics and conversion tracking models
model FrequentVisitor {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guestId         String   @unique @map("guest_id") @db.Uuid
  visitCount      Int      @default(0) @map("visit_count") // Total completed visits
  totalDuration   Int      @default(0) @map("total_duration") // Total minutes spent in building
  averageStay     Float    @default(0) @map("average_stay") // Average visit duration
  
  // Engagement metrics
  lastVisitAt         DateTime? @map("last_visit_at") @db.Timestamptz
  visitStreak         Int       @default(0) @map("visit_streak") // Consecutive months with visits
  longestStreak       Int       @default(0) @map("longest_streak") // Longest streak achieved
  currentTier         VisitorTier @default(BRONZE) @map("current_tier")
  tierAchievedAt      DateTime? @map("tier_achieved_at") @db.Timestamptz

  // Network effects
  uniqueHostsCount    Int       @default(0) @map("unique_hosts_count") // Different hosts visited
  colleaguesInBuilding Int      @default(0) @map("colleagues_in_building") // Estimated colleagues
  networkScore        Float     @default(0) @map("network_score") // Social connectivity

  // Conversion prediction
  conversionScore     Float     @default(0) @map("conversion_score") // AI-calculated likelihood
  lastScoreUpdate     DateTime  @default(now()) @map("last_score_update") @db.Timestamptz
  
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  guest Guest @relation(fields: [guestId], references: [id])

  @@index([conversionScore])
  @@index([currentTier, visitCount])
  @@index([lastVisitAt])
  @@map("frequent_visitors")
}

model ConversionEvent {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guestId     String            @map("guest_id") @db.Uuid
  eventType   ConversionEventType @map("event_type")
  eventData   Json?             @map("event_data") // Flexible data storage
  touchpoint  String?           // Email, survey, meeting, etc.
  outcome     String?           // Positive, negative, neutral
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  guest Guest @relation(fields: [guestId], references: [id])

  @@index([guestId, eventType])
  @@index([createdAt])
  @@map("conversion_events")
}

model ReferralEvent {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hostId          String        @map("host_id") @db.Uuid
  referredGuestId String        @map("referred_guest_id") @db.Uuid
  eventType       ReferralEventType @map("event_type")
  rewardAmount    Float         @default(0) @map("reward_amount")
  status          ReferralStatus @default(PENDING)
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz
  completedAt     DateTime?     @map("completed_at") @db.Timestamptz

  // Relations  
  host          User  @relation(fields: [hostId], references: [id])
  referredGuest Guest @relation("GuestReferrals", fields: [referredGuestId], references: [id])

  @@index([hostId, status])
  @@index([createdAt])
  @@map("referral_events")
}

model EngagementSurvey {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guestId           String    @map("guest_id") @db.Uuid
  visitId           String?   @map("visit_id") @db.Uuid
  surveyType        SurveyType
  
  // Survey responses
  satisfactionScore Int?      @map("satisfaction_score") // 1-5 rating
  npsScore         Int?       @map("nps_score") // Net Promoter Score 0-10
  hostingInterest  Int?       @map("hosting_interest") // 1-5 interest in hosting
  amenityRatings   Json?      @map("amenity_ratings") // Gym, cafeteria, etc.
  improvementSuggestions String? @map("improvement_suggestions")
  openFeedback     String?    @map("open_feedback")
  
  // Follow-up tracking
  followUpRequested Boolean   @default(false) @map("follow_up_requested")
  salesContactOk   Boolean   @default(false) @map("sales_contact_ok")
  
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  completedAt      DateTime? @map("completed_at") @db.Timestamptz

  // Relations
  guest Guest @relation(fields: [guestId], references: [id])
  visit Visit? @relation(fields: [visitId], references: [id])

  @@index([guestId, surveyType])
  @@index([completedAt])
  @@map("engagement_surveys")
}

// New enums for analytics system
enum HostTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum VisitorTier {
  BRONZE    // 1-2 visits
  SILVER    // 3-5 visits  
  GOLD      // 6-10 visits
  PLATINUM  // 11+ visits
  VIP       // Special status
}

enum ConversionEventType {
  SURVEY_COMPLETED
  OUTREACH_EMAIL_SENT
  OUTREACH_EMAIL_OPENED
  OUTREACH_EMAIL_CLICKED
  FOLLOW_UP_MEETING
  DEMO_SCHEDULED
  TRIAL_HOSTING_STARTED
  CONVERSION_COMPLETED
  CONVERSION_DECLINED
}

enum ReferralEventType {
  GUEST_INVITED
  GUEST_VISITED
  GUEST_CONVERTED
  REWARD_EARNED
}

enum ReferralStatus {
  PENDING
  QUALIFIED
  COMPLETED
  EXPIRED
}

enum SurveyType {
  POST_VISIT
  MONTHLY_CHECK_IN
  CONVERSION_INTEREST
  EXIT_INTERVIEW
}

enum UserRole {
  host
  admin
  security
}

enum ContactMethod {
  EMAIL
  TELEGRAM
  PHONE
}

enum InvitationStatus {
  PENDING
  ACTIVATED
  CHECKED_IN
  EXPIRED
}
